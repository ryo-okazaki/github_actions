actions/*
はGitHubが公式で用意しているアクション
リポジトリの内容の取得や、node.jsのセットアップを簡単にできる
アクションには、公式のものや自作で行うことができる


npm run test -- --coverage

ifの設定で、コマンドの実行が失敗しても後続の処理を行う分岐ができる

ワークフローの定期実行
・ソースコードをpushしたタイミング以外にも、日時などの頻度で定期的にワークフローを実行したい場合がある
  → 実行時間が長いため、pushのたびに実行したくないテストの実行
  → 長期間pushされていない場合でも、依存ライブラリがなくなったりしていないことを保証
  → 脆弱性診断ツールによって、ライブラリなどに新たな脆弱性が発見されていないかをチェック


node.jsのインストールTips
・npm install -g stepci
  → グローバルインストールされる。基本的に避けるべき
・npm install stepci
  → ローカルインストールで、dependencies（本番でも使うパッケージ）と処理される
・npm install --save-dev stepci
  → ローカルインストールで、devDependencies（開発中だけ使うパッケージ）と処理される

npmでインストールしたツールの実行方法
  → npmでは、インストール方法によって実行方法が異なる
・グローバルインストール
stepci --version

・ローカルインストール
npx stepci --version
  → ローカルインストールしたツールを実行するには、npxコマンドを使う
  → しかし、コマンドが長くなるので「npm scripts」というnpmの機能を使うと、コマンドを短い入力で実行できる
→ npm run test:api

npx stepci run stepci/workflow.yml
  → stepciの実行


アプリケーションの起動を待つ方法
・wait for itやwait forなどのシェルスクリプトを使う
・node.jsのパッケージのwait-onを使う

・プロセスの確認
ps aux
・使用しているポートの確認
sudo ss -antup

・木構造で表示
pstree -p

Linux
systemdの設定ファイルに従って、起動している
nodeコマンドもsystemdに起動してもらうのが望ましい
→ 何かの拍子で停止しても自動的に再実行してくれる、アプリケーションが出力したログを管理

/etc/systemd/system/

systemd設定ファイルの再読み込み
sudo systemctl daemon-reload

・ログの見方
journalctl -u backend